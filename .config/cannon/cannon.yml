
# all keys in this file may be prefixed to define per-platform and per-host values
#
#     use os.<$GOOS>.<key> to set per-OS values using $GOOS: https://go.dev/doc/install/source#environment
#     use host.<name>.<key> to set per-host values using the lowercase hostname
#         port:            8888
#         os.windows.port: 7777
#         host.hal9k.port: 9999
#
#     at runtime, the most-specific matching key that exists will be used: host.*.key > os.*.key > key

# specify server port
port: 8888

# specify file conversion timeout in milliseconds
#     if a file conversion takes too long, just display the raw file data instead
timeout: 500

# define the exit value to be used when displaying a file at the command line: $ cannon <file>
#     this exists because lf attempts to cache the preview unless the previewer returns a non-zero exit code
exit: 255

# define the logfile ($ tail -f <logfile>)
#logfile:            /tmp/cannon.log
#os.windows.logfile: '{env.TEMP}/cannon.log'

# specify command and args to start the preview browser
#     use "browser: []" to prevent the browser from starting when running over SSH
#     specify the '{url}' placeholder arg in the correct position so cannon can insert the server url
#     specify the appropriate argument for the browser to enable auto-play for faster media previews
browser:            [ google-chrome,                                             --autoplay-policy=no-user-gesture-required, '{url}' ]
os.windows.browser: [ '{env.ProgramFiles}/Google/Chrome/Application/chrome.exe', --autoplay-policy=no-user-gesture-required, '{url}' ]

# specify command and args to detect the input file's mime-type
#     specify the '{input}' placeholder arg in the correct position so cannon can insert the selected file
mime:            [ file,                                                    -b, --mime-type, '{input}' ]
os.windows.mime: [ '{env.USERPROFILE}/scoop/apps/git/current/usr/bin/file', -b, --mime-type, '{input}' ]

# deps: (optional) specify the command line applications required to perform file conversions
#     the existence of each application will be validated on --start and the missing ones will be logged
#     apps: specify a list of executable names or full paths
#     desc: specify a note to help the user find and install the apps[]
deps:
  - ################################################################
    # imagemagick
    apps:            [ convert ]
    os.windows.apps: [ magick ]

    desc:            https://imagemagick.org ($ sudo apt install imagemagick)
    os.windows.desc: https://imagemagick.org (> scoop install imagemagick)

  - ################################################################
    # mupdf
    apps: [ mutool ]
    desc: https://mupdf.com

  - ################################################################
    # ffmpeg
    apps: [ ffmpeg ]
    desc: https://ffmpeg.org

  - ################################################################
    # chroma
    apps: [ chroma ]
    desc: https://github.com/alecthomas/chroma/releases (download/extract into the $PATH)

# specify rules to convert each file type into its web equivalent for display in the browser
#     completely independent rule sets can be defined using os.<$GOOS>.rules and host.<name>.rules
#     rule sets are evaluated in order from top to bottom and the first matching rule will run
#     each entry in the rule set uses the keys described below
#     keys can be overloaded using os.<$GOOS>.key and host.<name>.key to handle special cases
#
#     ext|mime: specify patterns to match either the file extension or mime type
#          cmd: specify the file conversion command to run when a matching input file is found
#               specify '{input}' and '{output}' placeholders in the right positions so cannon can insert the filenames
#               the output param may specify an extension: '{output}.jpg'
#         html: specify the html fragment to display the output in the browser
#               the html fragment supports several placeholders
#               use '{url}' for elements that use src= references
#               use '{stdout}|{stderr}|{content}' to insert the results of the file conversion directly
rules:
  - ################################################################
    # native image extensions
    ext:  [ apng, avif, gif, jpg, jpeg, jfif, pjpeg, pjp, png, svg, webp ]
    html: <img src='{url}'>

  - ################################################################
    # native video extensions
    ext:  [ mp4, ogg, ogv, webm ]
    html: <video autoplay loop controls src='{url}'>

  - ################################################################
    # native audio extensions
    ext:  [ mp3, wav ]
    html: <audio autoplay loop controls src='{url}'>

  - ################################################################
    # native text extensions
    ext:  [ html, htm ]
    html: <iframe src='{url}'>

  - ################################################################
    # non-native image types
    mime: [ image ]

    # use imagemagick to convert images
    # run 'convert' on most platforms ('magick convert' on windows)
    cmd:            [         convert, '{input}', '{output}.jpg' ]
    os.windows.cmd: [ magick, convert, '{input}', '{output}.jpg' ]

    html: <img src='{url}'>

  - ################################################################
    # common document extensions
    ext:  [ pdf, xps, cbz, epub, fb2 ]

    # use mupdf to convert the first page into an image
    cmd:  [ mutool, convert, -o, '{output}.png', '{input}', 1 ]

    html: <img src='{url}'>

  - ################################################################
    # non-native video types
    mime: [ video ]

    # use ffmpeg to convert the first keyframe into an image
    cmd:  [ ffmpeg, -skip_frame, nokey, -i, '{input}', -frames:v, 1, '{output}.jpg' ]

    html: <img src='{url}'>

  - ################################################################
    # non-native audio types
    mime: [ audio ]

    # use ffmpeg to sample the first few seconds of audio
    cmd:  [ ffmpeg, -ss, 0, -i, '{input}', -t, 3, '{output}.wav' ]

    html: <audio autoplay loop controls src='{url}'>

  - ################################################################
    # default text types
    mime: [ text ]

    # use 'chroma' for syntax highlighting
    cmd: [ chroma, '{input}', --html, --style, colorful, --html-only, --html-inline-styles ]

    html: <div>{stdout}</div>




1. parse literal string to design format

https://stackoverflow.com/questions/28682439/go-parse-yaml-file
https://zhwt.github.io/yaml-to-go/
https://github.com/spf13/viper/issues/385#issuecomment-337264721

2. install viper







$ go get gopkg.in/yaml.v3

2. load yaml from a file

https://stackoverflow.com/questions/30947534/how-to-read-a-yaml-file

3. detect file changes and reload the file

https://github.com/fsnotify/fsnotify

$ go get github.com/fsnotify/fsnotify


https://github.com/spf13/viper#watching-and-re-reading-config-files
https://search.brave.com/search?q=golanf+viper+yaml+example&source=desktop
https://stackoverflow.com/questions/52585309/how-do-i-use-viper-to-get-a-value-from-a-nested-yaml-structure
https://stackoverflow.com/questions/41631008/mapping-nested-config-yaml-to-struct
https://github.com/fsnotify/fsnotify
https://github.com/mitchellh/mapstructure

https://www.openmymind.net/Golang-Hot-Configuration-Reload/
https://www.fatalerrors.org/a/golang-configuration-file-hot-update.html

https://stackoverflow.com/questions/52585309/how-do-i-use-viper-to-get-a-value-from-a-nested-yaml-structure


https://go.dev/play/



https://github.com/gabriel-vasile/mimetype

https://github.com/ethanpil/sheret
https://github.com/ethanpil/sheret/blob/master/src/sheret.go





package main

import (
	"fmt"
	"log"
	"os"
	"net/http"
)

func main() {

	// API routes

	// Serve files from static folder
	http.Handle("/c/", http.FileServer(http.Dir("C:\\")))
	http.Handle("/o/", http.FileServer(http.Dir("O:\\")))

	// Serve api /hi
	http.HandleFunc("/hi", func(w http.ResponseWriter, r *http.Request) {
		f, _ := os.Getwd()
		fmt.Fprintf(w, f)
	})

	port := ":5000"
	fmt.Println("Server is running on port" + port)

	// Start server on port specified above
	log.Fatal(http.ListenAndServe(port, nil))

}





package main

import (
    "fmt"
    "log"
    "net/http"
)

const jsFile = `alert('Hello World!');`

func main() {
    http.HandleFunc("/file.js", JsHandler)

    log.Fatal(http.ListenAndServe(":5000", nil))
}

func JsHandler(w http.ResponseWriter, r *http.Request) {
    // Getting the headers so we can set the correct mime type
    headers := w.Header()
    headers["Content-Type"] = []string{"application/javascript"}
    fmt.Fprint(w, jsFile)
}






